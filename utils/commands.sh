function generate_keys {
    # Takes two arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. Prefix for all keys generated by this script

    if [ "$#" != 2 ]; then
        echo "Error: Invalid number of arguments. Expected 2 arguments : NAMADA_BIN_DIR and SMOKE_TESTING_PREFIX."
        exit 1
    fi
    # Generate keypairs
    local namada_bin_dir="$1"
    local prefix="$2"
    echo "Generating keypairs"
    $namada_bin_dir/namadaw key gen --alias $prefix"multisig-key-1" --unsafe-dont-encrypt
    $namada_bin_dir/namadaw key gen --alias $prefix"multisig-key-2" --unsafe-dont-encrypt
    $namada_bin_dir/namadaw key gen --alias $prefix"multisig-key-3" --unsafe-dont-encrypt
}

function init_account {
    # Takes four arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The name of the account
    # 3. The public keys of the account
    # 4. The threshold of the account

    local namada_bin_dir=$1
    local account_name=$2
    local public_keys=$3
    local threshold=$4

    if [ "$#" != 4 ]; then
        echo "Error: Invalid number of arguments. Expected 4 arguments : namada_bin_dir, account_name, public_keys, threshold."
        exit 1
    fi
    echo "Creating new account: $account_name"
    
    # Create account
    $namada_bin_dir/namadac init-account --alias "$account_name" \
        --public-keys "$public_keys" \
        --signing-keys "$public_keys" \
        --threshold $threshold
}

function fund_account {
    # Takes four arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The name of the account
    # 3. The signing keys of the account
    # 4. The amount to fund
    
    NAMADA_BIN_DIR=$1
    ACCOUNT_NAME=$2
    SIGNING_KEYS=$3
    AMOUNT=$4

    if [ "$#" != 4 ]; then
        echo "Error: Invalid number of arguments. Expected 4 arguments : NAMADA_BIN_DIR, ACCOUNT_NAME, SIGNING_KEYS, AMOUNT."
        exit 1
    fi
    echo "Funding account: $ACCOUNT_NAME"
    $NAMADA_BIN_DIR/namadac transfer --source "faucet" --target "$ACCOUNT_NAME" \
        --amount $AMOUNT --token NAM --signing-keys "$SIGNING_KEYS"
}

function fund_account_bo {
    # Takes four arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The name of the account
    # 3. The signing keys of the account
    # 4. The amount to fund
    
    NAMADA_BIN_DIR=$1
    ACCOUNT_NAME=$2
    SIGNING_KEYS=$3
    AMOUNT=$4

    if [ "$#" != 4 ]; then
        echo "Error: Invalid number of arguments. Expected 4 arguments : NAMADA_BIN_DIR, ACCOUNT_NAME, SIGNING_KEYS, AMOUNT."
        exit 1
    fi
    echo "Funding account: $ACCOUNT_NAME"
    $NAMADA_BIN_DIR/namadac transfer --source "faucet" --target "$ACCOUNT_NAME" \
        --amount $AMOUNT --token NAM --signing-keys "$SIGNING_KEYS" --broadcast-only
}

function transfer {
    # Takes five arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The name of the source account
    # 3. The amount to transfer
    # 4. The signing keys of the account
    # 5. The name of the target account

    local namada_bin_dir=$1
    local account_name=$2
    local amount=$3
    local signing_keys=$4
    local target_account=$5

    if [ "$#" != 5 ]; then
        echo "Error: Invalid number of arguments. Expected 5 arguments : namada_bin_dir, account_name, amount, signing_keys, target_account."
        exit 1
    fi
    echo "Transferring $amount NAM from $account_name to $target_account"
    $namada_bin_dir/namadac transfer --source "$account_name" --target "$target_account" \
        --amount $amount --token NAM --signing-keys "$signing_keys"
}

function basic_multisig {
    # Takes two arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. Prefix for all keys generated by this script

    if [ "$#" != 2 ]; then
        echo "Error: Invalid number of arguments. Expected 2 arguments : namada_bin_dir and prefix."
        exit 1
    fi

    local namada_bin_dir="$1"
    local prefix="$2"
    
    # Generate keypairs
    generate_keys "$namada_bin_dir" "$prefix"

    # Create account
    local account_name=$prefix"multisig-account-1"
    local public_keys="${prefix}multisig-key-1,${prefix}multisig-key-2,${prefix}multisig-key-3"
    init_account "$namada_bin_dir" "$account_name" "$public_keys" 2

    echo "Funding account"

    local signing_key="${prefix}multisig-key-1"
    # Fund account
    fund_account "$namada_bin_dir" "$account_name" "$signing_key" 1000
    fund_account "$namada_bin_dir" "$account_name" "$signing_key" 1000

    command_output=$($namada_bin_dir/namadac balance --owner $account_name --token NAM)

    if echo "$command_output" | grep -q "2000"; then
        echo "Output verification succeeded!"
    else
        echo "Output verification failed!"
    fi
}

function generate_masp_keys {
    # Takes three arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. Prefix for all keys generated by this script
    # 3. The number of keys to generate

    if [ "$#" != 3 ]; then
        echo "Error: Invalid number of arguments. Expected 3 arguments : namada_bin_dir, prefix, and number_of_keys."
        exit 1
    fi
    # Generate keypairs
    local namada_bin_dir="$1"
    local prefix="$2"
    local number_of_keys="$3"
    echo "Generating masp keypairs"

    for i in $(seq 1 $number_of_keys); do
        $namada_bin_dir/namadaw masp gen-key --alias $prefix"masp-key-$i" --unsafe-dont-encrypt
    done
}

function generate_masp_addresses {
    # Takes three arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. Prefix for all keys generated by this script
    # 3. The number of addresses to generate

    if [ "$#" != 3 ]; then
        echo "Error: Invalid number of arguments. Expected 2 arguments : NAMADA_BIN_DIR and SMOKE_TESTING_PREFIX."
        exit 1
    fi
    # Generate keypairs
    local namada_bin_dir="$1"
    local prefix="$2"
    local number_of_addresses="$3"

    for i in $(seq 1 $number_of_addresses); do
        $namada_bin_dir/namadaw masp gen-addr --alias $prefix"masp-address-$i" --key $prefix"masp-key-$i"
    done
}

function bond_tokens {
    # Takes five arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The name of the source account
    # 3. The amount to bond
    # 4. The signing keys of the account
    # 5. The validator alias or address

    local namada_bin_dir=$1
    local account_name=$2
    local amount=$3
    local signing_keys=$4
    local target_account=$5

    if [ "$#" != 5 ]; then
        echo "Error: Invalid number of arguments. Expected 5 arguments : namada_bin_dir, account_name, amount, signing_keys, target_account."
        exit 1
    fi
    echo "Bonding $amount NAM from $account_name to $target_account"
    $namada_bin_dir/namadac bond --source "$account_name" --validator "$target_account" \
        --amount $amount --signing-keys "$signing_keys"
}

function init_validator {
    # Takes three arguments
    # 1. The path to the directory containing the Namada binaries
    # 2. The prefix for all keys generated by this script
    # 3. The validator alias

    local namada_bin_dir=$1
    local prefix=$2
    local account_name=$3


    if [ "$#" != 3 ]; then
        echo "Error: Invalid number of arguments. Expected 3 arguments : namada_bin_dir, prefix, and validator alias."
        exit 1
    fi
    echo "Creating new validator account: $account_name"

    # Create account
    local public_keys="${prefix}multisig-key-1,${prefix}multisig-key-2,${prefix}multisig-key-3"
    $namada_bin_dir/namadac init-validator --alias "$account_name" \
        --account-keys "$public_keys" \
        --commission-rate 0.05 \
        --max-commission-rate-change 0.1 \
        --signing-keys "${prefix}multisig-key-1" \
        --unsafe-dont-encrypt \
        --threshold 2
}

function offline_transfer {
    local namada_bin_dir=$1
    local source=$2
    local amount=$3
    local token=$4
    local target=$5
    local signing_keys=$6

    namadac transfer \
    --source $source \
    --target $target \
    --amount $amount \
    --token $token \
    --signing-keys $signing_keys \
    --offline-tx
}

function get_address {
    local namada_bin_dir=$1
    local account_name=$2

    ACCOUNT_ADDRESS=$($NAMADA_BIN_DIR/namadaw address list | grep $ACCOUNT_NAME | awk '{print $2}')
}